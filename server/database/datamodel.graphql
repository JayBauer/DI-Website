type User {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String! @unique
  password: String!
  isAdmin: Boolean! @default(value: "false")
  firstName: String!
  lastName: String!
  phone: String!
  address1: String!
  address2: String
  city: String!
  province: String!
  postal: String!
  bookings: [Booking!]! @relation(name: "UserBookings", onDelete: CASCADE)
  stripe: StripeCustomer @relation(name: "Stripe")
}

type Booking {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User! @relation(name: "UserBookings")
  bookingFor: BookingFor
  ontarioRes: IsResident
  bodyParts: Json
  waiver: Waiver!
  referral: Referral @relation(name: "BookingReferral" onDelete: CASCADE)
  payment: Boolean! @default(value: "false")
  progress: String! @default(value: "BookingFor")
}

type Referral {
  pay: Boolean! @default(value: "false")
  upload: File @relation(name: "ReferralUpload" onDelete: CASCADE)
}

type Waiver {
  party: [String!]!
  otherParty: Json!
  agree: Boolean!
  firstName: String!
  lastName: String!
  date: String!
}

type StripeCustomer {
  id: ID! @unique
  stripeId: String! @unique
  user: User! @relation(name: "Stripe")
  charges: [Charge!]! @relation(name: "Charges" onDelete: CASCADE)
}

type Charge {
  id: ID! @unique
  chargedTo: StripeCustomer! @relation(name: "Charges")
  amount: Float!
  currency: String! @default(value: "CAD")
}

input Upload {
  name: String!
  type: String!
  size: Int!
  path: String!
}

type File {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String! @unique
}

enum BookingFor {
  PATIENT
  MYSELF
  CLIENT
}

enum IsResident {
  YES
  NO
}
