# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Charge implements Node {
  id: ID!
  chargedTo(where: StripeCustomerWhereInput): StripeCustomer!
  amount: Float!
  currency: String!
}

type Quiz implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user(where: UserWhereInput): User!
  bookingFor: Booking
  ontarioRes: IsResident
  bodyParts: Json
  waiver(where: WaiverWhereInput): Waiver!
  referral(where: ReferralWhereInput): Referral!
  payment: Boolean!
}

type StripeCustomer implements Node {
  id: ID!
  stripeId: String!
  user(where: UserWhereInput): User!
  charges(where: ChargeWhereInput, orderBy: ChargeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Charge!]
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  isAdmin: Boolean!
  firstName: String!
  lastName: String!
  phone: String!
  address1: String!
  address2: String
  city: String!
  province: String!
  postal: String!
  quizzes(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]
  stripe(where: StripeCustomerWhereInput): StripeCustomer
}


#
# Other Types
#

type AggregateCharge {
  count: Int!
}

type AggregateQuiz {
  count: Int!
}

type AggregateReferral {
  count: Int!
}

type AggregateStripeCustomer {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWaiver {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

enum Booking {
  PATIENT
  MYSELF
  CLIENT
}

"""
A connection to a list of items.
"""
type ChargeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ChargeEdge]!
  aggregate: AggregateCharge!
}

input ChargeCreateInput {
  amount: Float!
  currency: String
  chargedTo: StripeCustomerCreateOneWithoutChargesInput!
}

input ChargeCreateManyWithoutChargedToInput {
  create: [ChargeCreateWithoutChargedToInput!]
  connect: [ChargeWhereUniqueInput!]
}

input ChargeCreateWithoutChargedToInput {
  amount: Float!
  currency: String
}

"""
An edge in a connection.
"""
type ChargeEdge {
  """
  The item at the end of the edge.
  """
  node: Charge!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ChargeOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  currency_ASC
  currency_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChargePreviousValues {
  id: ID!
  amount: Float!
  currency: String!
}

type ChargeSubscriptionPayload {
  mutation: MutationType!
  node: Charge
  updatedFields: [String!]
  previousValues: ChargePreviousValues
}

input ChargeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ChargeSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ChargeSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChargeWhereInput
}

input ChargeUpdateInput {
  amount: Float
  currency: String
  chargedTo: StripeCustomerUpdateOneWithoutChargesInput
}

input ChargeUpdateManyWithoutChargedToInput {
  create: [ChargeCreateWithoutChargedToInput!]
  connect: [ChargeWhereUniqueInput!]
  disconnect: [ChargeWhereUniqueInput!]
  delete: [ChargeWhereUniqueInput!]
  update: [ChargeUpdateWithWhereUniqueWithoutChargedToInput!]
  upsert: [ChargeUpsertWithWhereUniqueWithoutChargedToInput!]
}

input ChargeUpdateWithoutChargedToDataInput {
  amount: Float
  currency: String
}

input ChargeUpdateWithWhereUniqueWithoutChargedToInput {
  where: ChargeWhereUniqueInput!
  data: ChargeUpdateWithoutChargedToDataInput!
}

input ChargeUpsertWithWhereUniqueWithoutChargedToInput {
  where: ChargeWhereUniqueInput!
  update: ChargeUpdateWithoutChargedToDataInput!
  create: ChargeCreateWithoutChargedToInput!
}

input ChargeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ChargeWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ChargeWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  amount: Float
  """
  All values that are not equal to given value.
  """
  amount_not: Float
  """
  All values that are contained in given list.
  """
  amount_in: [Float!]
  """
  All values that are not contained in given list.
  """
  amount_not_in: [Float!]
  """
  All values less than the given value.
  """
  amount_lt: Float
  """
  All values less than or equal the given value.
  """
  amount_lte: Float
  """
  All values greater than the given value.
  """
  amount_gt: Float
  """
  All values greater than or equal the given value.
  """
  amount_gte: Float
  currency: String
  """
  All values that are not equal to given value.
  """
  currency_not: String
  """
  All values that are contained in given list.
  """
  currency_in: [String!]
  """
  All values that are not contained in given list.
  """
  currency_not_in: [String!]
  """
  All values less than the given value.
  """
  currency_lt: String
  """
  All values less than or equal the given value.
  """
  currency_lte: String
  """
  All values greater than the given value.
  """
  currency_gt: String
  """
  All values greater than or equal the given value.
  """
  currency_gte: String
  """
  All values containing the given string.
  """
  currency_contains: String
  """
  All values not containing the given string.
  """
  currency_not_contains: String
  """
  All values starting with the given string.
  """
  currency_starts_with: String
  """
  All values not starting with the given string.
  """
  currency_not_starts_with: String
  """
  All values ending with the given string.
  """
  currency_ends_with: String
  """
  All values not ending with the given string.
  """
  currency_not_ends_with: String
  chargedTo: StripeCustomerWhereInput
}

input ChargeWhereUniqueInput {
  id: ID
}

scalar DateTime

enum IsResident {
  YES
  NO
}

"""
Raw JSON value
"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createQuiz(data: QuizCreateInput!): Quiz!
  createReferral(data: ReferralCreateInput!): Referral!
  createWaiver(data: WaiverCreateInput!): Waiver!
  createStripeCustomer(data: StripeCustomerCreateInput!): StripeCustomer!
  createCharge(data: ChargeCreateInput!): Charge!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateQuiz(data: QuizUpdateInput!, where: QuizWhereUniqueInput!): Quiz
  updateStripeCustomer(data: StripeCustomerUpdateInput!, where: StripeCustomerWhereUniqueInput!): StripeCustomer
  updateCharge(data: ChargeUpdateInput!, where: ChargeWhereUniqueInput!): Charge
  deleteUser(where: UserWhereUniqueInput!): User
  deleteQuiz(where: QuizWhereUniqueInput!): Quiz
  deleteStripeCustomer(where: StripeCustomerWhereUniqueInput!): StripeCustomer
  deleteCharge(where: ChargeWhereUniqueInput!): Charge
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertQuiz(where: QuizWhereUniqueInput!, create: QuizCreateInput!, update: QuizUpdateInput!): Quiz!
  upsertStripeCustomer(where: StripeCustomerWhereUniqueInput!, create: StripeCustomerCreateInput!, update: StripeCustomerUpdateInput!): StripeCustomer!
  upsertCharge(where: ChargeWhereUniqueInput!, create: ChargeCreateInput!, update: ChargeUpdateInput!): Charge!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyQuizzes(data: QuizUpdateInput!, where: QuizWhereInput): BatchPayload!
  updateManyReferrals(data: ReferralUpdateInput!, where: ReferralWhereInput): BatchPayload!
  updateManyWaivers(data: WaiverUpdateInput!, where: WaiverWhereInput): BatchPayload!
  updateManyStripeCustomers(data: StripeCustomerUpdateInput!, where: StripeCustomerWhereInput): BatchPayload!
  updateManyCharges(data: ChargeUpdateInput!, where: ChargeWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyQuizzes(where: QuizWhereInput): BatchPayload!
  deleteManyReferrals(where: ReferralWhereInput): BatchPayload!
  deleteManyWaivers(where: WaiverWhereInput): BatchPayload!
  deleteManyStripeCustomers(where: StripeCustomerWhereInput): BatchPayload!
  deleteManyCharges(where: ChargeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  quizzes(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz]!
  referrals(where: ReferralWhereInput, orderBy: ReferralOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Referral]!
  waivers(where: WaiverWhereInput, orderBy: WaiverOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Waiver]!
  stripeCustomers(where: StripeCustomerWhereInput, orderBy: StripeCustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StripeCustomer]!
  charges(where: ChargeWhereInput, orderBy: ChargeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Charge]!
  user(where: UserWhereUniqueInput!): User
  quiz(where: QuizWhereUniqueInput!): Quiz
  stripeCustomer(where: StripeCustomerWhereUniqueInput!): StripeCustomer
  charge(where: ChargeWhereUniqueInput!): Charge
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  quizzesConnection(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuizConnection!
  referralsConnection(where: ReferralWhereInput, orderBy: ReferralOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReferralConnection!
  waiversConnection(where: WaiverWhereInput, orderBy: WaiverOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WaiverConnection!
  stripeCustomersConnection(where: StripeCustomerWhereInput, orderBy: StripeCustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StripeCustomerConnection!
  chargesConnection(where: ChargeWhereInput, orderBy: ChargeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChargeConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

"""
A connection to a list of items.
"""
type QuizConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [QuizEdge]!
  aggregate: AggregateQuiz!
}

input QuizCreateInput {
  bookingFor: Booking
  ontarioRes: IsResident
  bodyParts: Json
  payment: Boolean
  user: UserCreateOneWithoutQuizzesInput!
  waiver: WaiverCreateOneInput!
  referral: ReferralCreateOneInput!
}

input QuizCreateManyWithoutUserInput {
  create: [QuizCreateWithoutUserInput!]
  connect: [QuizWhereUniqueInput!]
}

input QuizCreateWithoutUserInput {
  bookingFor: Booking
  ontarioRes: IsResident
  bodyParts: Json
  payment: Boolean
  waiver: WaiverCreateOneInput!
  referral: ReferralCreateOneInput!
}

"""
An edge in a connection.
"""
type QuizEdge {
  """
  The item at the end of the edge.
  """
  node: Quiz!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum QuizOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  bookingFor_ASC
  bookingFor_DESC
  ontarioRes_ASC
  ontarioRes_DESC
  bodyParts_ASC
  bodyParts_DESC
  payment_ASC
  payment_DESC
}

type QuizPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  bookingFor: Booking
  ontarioRes: IsResident
  bodyParts: Json
  payment: Boolean!
}

type QuizSubscriptionPayload {
  mutation: MutationType!
  node: Quiz
  updatedFields: [String!]
  previousValues: QuizPreviousValues
}

input QuizSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [QuizSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [QuizSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuizWhereInput
}

input QuizUpdateInput {
  bookingFor: Booking
  ontarioRes: IsResident
  bodyParts: Json
  payment: Boolean
  user: UserUpdateOneWithoutQuizzesInput
  waiver: WaiverUpdateOneInput
  referral: ReferralUpdateOneInput
}

input QuizUpdateManyWithoutUserInput {
  create: [QuizCreateWithoutUserInput!]
  connect: [QuizWhereUniqueInput!]
  disconnect: [QuizWhereUniqueInput!]
  delete: [QuizWhereUniqueInput!]
  update: [QuizUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [QuizUpsertWithWhereUniqueWithoutUserInput!]
}

input QuizUpdateWithoutUserDataInput {
  bookingFor: Booking
  ontarioRes: IsResident
  bodyParts: Json
  payment: Boolean
  waiver: WaiverUpdateOneInput
  referral: ReferralUpdateOneInput
}

input QuizUpdateWithWhereUniqueWithoutUserInput {
  where: QuizWhereUniqueInput!
  data: QuizUpdateWithoutUserDataInput!
}

input QuizUpsertWithWhereUniqueWithoutUserInput {
  where: QuizWhereUniqueInput!
  update: QuizUpdateWithoutUserDataInput!
  create: QuizCreateWithoutUserInput!
}

input QuizWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [QuizWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [QuizWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  bookingFor: Booking
  """
  All values that are not equal to given value.
  """
  bookingFor_not: Booking
  """
  All values that are contained in given list.
  """
  bookingFor_in: [Booking!]
  """
  All values that are not contained in given list.
  """
  bookingFor_not_in: [Booking!]
  ontarioRes: IsResident
  """
  All values that are not equal to given value.
  """
  ontarioRes_not: IsResident
  """
  All values that are contained in given list.
  """
  ontarioRes_in: [IsResident!]
  """
  All values that are not contained in given list.
  """
  ontarioRes_not_in: [IsResident!]
  payment: Boolean
  """
  All values that are not equal to given value.
  """
  payment_not: Boolean
  user: UserWhereInput
  waiver: WaiverWhereInput
  referral: ReferralWhereInput
}

input QuizWhereUniqueInput {
  id: ID
}

type Referral {
  maple: Boolean!
  upload: String!
}

"""
A connection to a list of items.
"""
type ReferralConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ReferralEdge]!
  aggregate: AggregateReferral!
}

input ReferralCreateInput {
  maple: Boolean
  upload: String!
}

input ReferralCreateOneInput {
  create: ReferralCreateInput
}

"""
An edge in a connection.
"""
type ReferralEdge {
  """
  The item at the end of the edge.
  """
  node: Referral!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ReferralOrderByInput {
  maple_ASC
  maple_DESC
  upload_ASC
  upload_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ReferralPreviousValues {
  maple: Boolean!
  upload: String!
}

type ReferralSubscriptionPayload {
  mutation: MutationType!
  node: Referral
  updatedFields: [String!]
  previousValues: ReferralPreviousValues
}

input ReferralSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReferralSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ReferralSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReferralWhereInput
}

input ReferralUpdateDataInput {
  maple: Boolean
  upload: String
}

input ReferralUpdateInput {
  maple: Boolean
  upload: String
}

input ReferralUpdateOneInput {
  create: ReferralCreateInput
  delete: Boolean
  update: ReferralUpdateDataInput
  upsert: ReferralUpsertNestedInput
}

input ReferralUpsertNestedInput {
  update: ReferralUpdateDataInput!
  create: ReferralCreateInput!
}

input ReferralWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ReferralWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ReferralWhereInput!]
  maple: Boolean
  """
  All values that are not equal to given value.
  """
  maple_not: Boolean
  upload: String
  """
  All values that are not equal to given value.
  """
  upload_not: String
  """
  All values that are contained in given list.
  """
  upload_in: [String!]
  """
  All values that are not contained in given list.
  """
  upload_not_in: [String!]
  """
  All values less than the given value.
  """
  upload_lt: String
  """
  All values less than or equal the given value.
  """
  upload_lte: String
  """
  All values greater than the given value.
  """
  upload_gt: String
  """
  All values greater than or equal the given value.
  """
  upload_gte: String
  """
  All values containing the given string.
  """
  upload_contains: String
  """
  All values not containing the given string.
  """
  upload_not_contains: String
  """
  All values starting with the given string.
  """
  upload_starts_with: String
  """
  All values not starting with the given string.
  """
  upload_not_starts_with: String
  """
  All values ending with the given string.
  """
  upload_ends_with: String
  """
  All values not ending with the given string.
  """
  upload_not_ends_with: String
}

"""
A connection to a list of items.
"""
type StripeCustomerConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [StripeCustomerEdge]!
  aggregate: AggregateStripeCustomer!
}

input StripeCustomerCreateInput {
  stripeId: String!
  user: UserCreateOneWithoutStripeInput!
  charges: ChargeCreateManyWithoutChargedToInput
}

input StripeCustomerCreateOneWithoutChargesInput {
  create: StripeCustomerCreateWithoutChargesInput
  connect: StripeCustomerWhereUniqueInput
}

input StripeCustomerCreateOneWithoutUserInput {
  create: StripeCustomerCreateWithoutUserInput
  connect: StripeCustomerWhereUniqueInput
}

input StripeCustomerCreateWithoutChargesInput {
  stripeId: String!
  user: UserCreateOneWithoutStripeInput!
}

input StripeCustomerCreateWithoutUserInput {
  stripeId: String!
  charges: ChargeCreateManyWithoutChargedToInput
}

"""
An edge in a connection.
"""
type StripeCustomerEdge {
  """
  The item at the end of the edge.
  """
  node: StripeCustomer!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum StripeCustomerOrderByInput {
  id_ASC
  id_DESC
  stripeId_ASC
  stripeId_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StripeCustomerPreviousValues {
  id: ID!
  stripeId: String!
}

type StripeCustomerSubscriptionPayload {
  mutation: MutationType!
  node: StripeCustomer
  updatedFields: [String!]
  previousValues: StripeCustomerPreviousValues
}

input StripeCustomerSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StripeCustomerSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [StripeCustomerSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StripeCustomerWhereInput
}

input StripeCustomerUpdateInput {
  stripeId: String
  user: UserUpdateOneWithoutStripeInput
  charges: ChargeUpdateManyWithoutChargedToInput
}

input StripeCustomerUpdateOneWithoutChargesInput {
  create: StripeCustomerCreateWithoutChargesInput
  connect: StripeCustomerWhereUniqueInput
  delete: Boolean
  update: StripeCustomerUpdateWithoutChargesDataInput
  upsert: StripeCustomerUpsertWithoutChargesInput
}

input StripeCustomerUpdateOneWithoutUserInput {
  create: StripeCustomerCreateWithoutUserInput
  connect: StripeCustomerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StripeCustomerUpdateWithoutUserDataInput
  upsert: StripeCustomerUpsertWithoutUserInput
}

input StripeCustomerUpdateWithoutChargesDataInput {
  stripeId: String
  user: UserUpdateOneWithoutStripeInput
}

input StripeCustomerUpdateWithoutUserDataInput {
  stripeId: String
  charges: ChargeUpdateManyWithoutChargedToInput
}

input StripeCustomerUpsertWithoutChargesInput {
  update: StripeCustomerUpdateWithoutChargesDataInput!
  create: StripeCustomerCreateWithoutChargesInput!
}

input StripeCustomerUpsertWithoutUserInput {
  update: StripeCustomerUpdateWithoutUserDataInput!
  create: StripeCustomerCreateWithoutUserInput!
}

input StripeCustomerWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StripeCustomerWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [StripeCustomerWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  stripeId: String
  """
  All values that are not equal to given value.
  """
  stripeId_not: String
  """
  All values that are contained in given list.
  """
  stripeId_in: [String!]
  """
  All values that are not contained in given list.
  """
  stripeId_not_in: [String!]
  """
  All values less than the given value.
  """
  stripeId_lt: String
  """
  All values less than or equal the given value.
  """
  stripeId_lte: String
  """
  All values greater than the given value.
  """
  stripeId_gt: String
  """
  All values greater than or equal the given value.
  """
  stripeId_gte: String
  """
  All values containing the given string.
  """
  stripeId_contains: String
  """
  All values not containing the given string.
  """
  stripeId_not_contains: String
  """
  All values starting with the given string.
  """
  stripeId_starts_with: String
  """
  All values not starting with the given string.
  """
  stripeId_not_starts_with: String
  """
  All values ending with the given string.
  """
  stripeId_ends_with: String
  """
  All values not ending with the given string.
  """
  stripeId_not_ends_with: String
  user: UserWhereInput
  charges_every: ChargeWhereInput
  charges_some: ChargeWhereInput
  charges_none: ChargeWhereInput
}

input StripeCustomerWhereUniqueInput {
  id: ID
  stripeId: String
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  quiz(where: QuizSubscriptionWhereInput): QuizSubscriptionPayload
  referral(where: ReferralSubscriptionWhereInput): ReferralSubscriptionPayload
  waiver(where: WaiverSubscriptionWhereInput): WaiverSubscriptionPayload
  stripeCustomer(where: StripeCustomerSubscriptionWhereInput): StripeCustomerSubscriptionPayload
  charge(where: ChargeSubscriptionWhereInput): ChargeSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  isAdmin: Boolean
  firstName: String!
  lastName: String!
  phone: String!
  address1: String!
  address2: String
  city: String!
  province: String!
  postal: String!
  quizzes: QuizCreateManyWithoutUserInput
  stripe: StripeCustomerCreateOneWithoutUserInput
}

input UserCreateOneWithoutQuizzesInput {
  create: UserCreateWithoutQuizzesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutStripeInput {
  create: UserCreateWithoutStripeInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutQuizzesInput {
  email: String!
  password: String!
  isAdmin: Boolean
  firstName: String!
  lastName: String!
  phone: String!
  address1: String!
  address2: String
  city: String!
  province: String!
  postal: String!
  stripe: StripeCustomerCreateOneWithoutUserInput
}

input UserCreateWithoutStripeInput {
  email: String!
  password: String!
  isAdmin: Boolean
  firstName: String!
  lastName: String!
  phone: String!
  address1: String!
  address2: String
  city: String!
  province: String!
  postal: String!
  quizzes: QuizCreateManyWithoutUserInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  isAdmin_ASC
  isAdmin_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  phone_ASC
  phone_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  province_ASC
  province_DESC
  postal_ASC
  postal_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  isAdmin: Boolean!
  firstName: String!
  lastName: String!
  phone: String!
  address1: String!
  address2: String
  city: String!
  province: String!
  postal: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  isAdmin: Boolean
  firstName: String
  lastName: String
  phone: String
  address1: String
  address2: String
  city: String
  province: String
  postal: String
  quizzes: QuizUpdateManyWithoutUserInput
  stripe: StripeCustomerUpdateOneWithoutUserInput
}

input UserUpdateOneWithoutQuizzesInput {
  create: UserCreateWithoutQuizzesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutQuizzesDataInput
  upsert: UserUpsertWithoutQuizzesInput
}

input UserUpdateOneWithoutStripeInput {
  create: UserCreateWithoutStripeInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutStripeDataInput
  upsert: UserUpsertWithoutStripeInput
}

input UserUpdateWithoutQuizzesDataInput {
  email: String
  password: String
  isAdmin: Boolean
  firstName: String
  lastName: String
  phone: String
  address1: String
  address2: String
  city: String
  province: String
  postal: String
  stripe: StripeCustomerUpdateOneWithoutUserInput
}

input UserUpdateWithoutStripeDataInput {
  email: String
  password: String
  isAdmin: Boolean
  firstName: String
  lastName: String
  phone: String
  address1: String
  address2: String
  city: String
  province: String
  postal: String
  quizzes: QuizUpdateManyWithoutUserInput
}

input UserUpsertWithoutQuizzesInput {
  update: UserUpdateWithoutQuizzesDataInput!
  create: UserCreateWithoutQuizzesInput!
}

input UserUpsertWithoutStripeInput {
  update: UserUpdateWithoutStripeDataInput!
  create: UserCreateWithoutStripeInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  isAdmin: Boolean
  """
  All values that are not equal to given value.
  """
  isAdmin_not: Boolean
  firstName: String
  """
  All values that are not equal to given value.
  """
  firstName_not: String
  """
  All values that are contained in given list.
  """
  firstName_in: [String!]
  """
  All values that are not contained in given list.
  """
  firstName_not_in: [String!]
  """
  All values less than the given value.
  """
  firstName_lt: String
  """
  All values less than or equal the given value.
  """
  firstName_lte: String
  """
  All values greater than the given value.
  """
  firstName_gt: String
  """
  All values greater than or equal the given value.
  """
  firstName_gte: String
  """
  All values containing the given string.
  """
  firstName_contains: String
  """
  All values not containing the given string.
  """
  firstName_not_contains: String
  """
  All values starting with the given string.
  """
  firstName_starts_with: String
  """
  All values not starting with the given string.
  """
  firstName_not_starts_with: String
  """
  All values ending with the given string.
  """
  firstName_ends_with: String
  """
  All values not ending with the given string.
  """
  firstName_not_ends_with: String
  lastName: String
  """
  All values that are not equal to given value.
  """
  lastName_not: String
  """
  All values that are contained in given list.
  """
  lastName_in: [String!]
  """
  All values that are not contained in given list.
  """
  lastName_not_in: [String!]
  """
  All values less than the given value.
  """
  lastName_lt: String
  """
  All values less than or equal the given value.
  """
  lastName_lte: String
  """
  All values greater than the given value.
  """
  lastName_gt: String
  """
  All values greater than or equal the given value.
  """
  lastName_gte: String
  """
  All values containing the given string.
  """
  lastName_contains: String
  """
  All values not containing the given string.
  """
  lastName_not_contains: String
  """
  All values starting with the given string.
  """
  lastName_starts_with: String
  """
  All values not starting with the given string.
  """
  lastName_not_starts_with: String
  """
  All values ending with the given string.
  """
  lastName_ends_with: String
  """
  All values not ending with the given string.
  """
  lastName_not_ends_with: String
  phone: String
  """
  All values that are not equal to given value.
  """
  phone_not: String
  """
  All values that are contained in given list.
  """
  phone_in: [String!]
  """
  All values that are not contained in given list.
  """
  phone_not_in: [String!]
  """
  All values less than the given value.
  """
  phone_lt: String
  """
  All values less than or equal the given value.
  """
  phone_lte: String
  """
  All values greater than the given value.
  """
  phone_gt: String
  """
  All values greater than or equal the given value.
  """
  phone_gte: String
  """
  All values containing the given string.
  """
  phone_contains: String
  """
  All values not containing the given string.
  """
  phone_not_contains: String
  """
  All values starting with the given string.
  """
  phone_starts_with: String
  """
  All values not starting with the given string.
  """
  phone_not_starts_with: String
  """
  All values ending with the given string.
  """
  phone_ends_with: String
  """
  All values not ending with the given string.
  """
  phone_not_ends_with: String
  address1: String
  """
  All values that are not equal to given value.
  """
  address1_not: String
  """
  All values that are contained in given list.
  """
  address1_in: [String!]
  """
  All values that are not contained in given list.
  """
  address1_not_in: [String!]
  """
  All values less than the given value.
  """
  address1_lt: String
  """
  All values less than or equal the given value.
  """
  address1_lte: String
  """
  All values greater than the given value.
  """
  address1_gt: String
  """
  All values greater than or equal the given value.
  """
  address1_gte: String
  """
  All values containing the given string.
  """
  address1_contains: String
  """
  All values not containing the given string.
  """
  address1_not_contains: String
  """
  All values starting with the given string.
  """
  address1_starts_with: String
  """
  All values not starting with the given string.
  """
  address1_not_starts_with: String
  """
  All values ending with the given string.
  """
  address1_ends_with: String
  """
  All values not ending with the given string.
  """
  address1_not_ends_with: String
  address2: String
  """
  All values that are not equal to given value.
  """
  address2_not: String
  """
  All values that are contained in given list.
  """
  address2_in: [String!]
  """
  All values that are not contained in given list.
  """
  address2_not_in: [String!]
  """
  All values less than the given value.
  """
  address2_lt: String
  """
  All values less than or equal the given value.
  """
  address2_lte: String
  """
  All values greater than the given value.
  """
  address2_gt: String
  """
  All values greater than or equal the given value.
  """
  address2_gte: String
  """
  All values containing the given string.
  """
  address2_contains: String
  """
  All values not containing the given string.
  """
  address2_not_contains: String
  """
  All values starting with the given string.
  """
  address2_starts_with: String
  """
  All values not starting with the given string.
  """
  address2_not_starts_with: String
  """
  All values ending with the given string.
  """
  address2_ends_with: String
  """
  All values not ending with the given string.
  """
  address2_not_ends_with: String
  city: String
  """
  All values that are not equal to given value.
  """
  city_not: String
  """
  All values that are contained in given list.
  """
  city_in: [String!]
  """
  All values that are not contained in given list.
  """
  city_not_in: [String!]
  """
  All values less than the given value.
  """
  city_lt: String
  """
  All values less than or equal the given value.
  """
  city_lte: String
  """
  All values greater than the given value.
  """
  city_gt: String
  """
  All values greater than or equal the given value.
  """
  city_gte: String
  """
  All values containing the given string.
  """
  city_contains: String
  """
  All values not containing the given string.
  """
  city_not_contains: String
  """
  All values starting with the given string.
  """
  city_starts_with: String
  """
  All values not starting with the given string.
  """
  city_not_starts_with: String
  """
  All values ending with the given string.
  """
  city_ends_with: String
  """
  All values not ending with the given string.
  """
  city_not_ends_with: String
  province: String
  """
  All values that are not equal to given value.
  """
  province_not: String
  """
  All values that are contained in given list.
  """
  province_in: [String!]
  """
  All values that are not contained in given list.
  """
  province_not_in: [String!]
  """
  All values less than the given value.
  """
  province_lt: String
  """
  All values less than or equal the given value.
  """
  province_lte: String
  """
  All values greater than the given value.
  """
  province_gt: String
  """
  All values greater than or equal the given value.
  """
  province_gte: String
  """
  All values containing the given string.
  """
  province_contains: String
  """
  All values not containing the given string.
  """
  province_not_contains: String
  """
  All values starting with the given string.
  """
  province_starts_with: String
  """
  All values not starting with the given string.
  """
  province_not_starts_with: String
  """
  All values ending with the given string.
  """
  province_ends_with: String
  """
  All values not ending with the given string.
  """
  province_not_ends_with: String
  postal: String
  """
  All values that are not equal to given value.
  """
  postal_not: String
  """
  All values that are contained in given list.
  """
  postal_in: [String!]
  """
  All values that are not contained in given list.
  """
  postal_not_in: [String!]
  """
  All values less than the given value.
  """
  postal_lt: String
  """
  All values less than or equal the given value.
  """
  postal_lte: String
  """
  All values greater than the given value.
  """
  postal_gt: String
  """
  All values greater than or equal the given value.
  """
  postal_gte: String
  """
  All values containing the given string.
  """
  postal_contains: String
  """
  All values not containing the given string.
  """
  postal_not_contains: String
  """
  All values starting with the given string.
  """
  postal_starts_with: String
  """
  All values not starting with the given string.
  """
  postal_not_starts_with: String
  """
  All values ending with the given string.
  """
  postal_ends_with: String
  """
  All values not ending with the given string.
  """
  postal_not_ends_with: String
  quizzes_every: QuizWhereInput
  quizzes_some: QuizWhereInput
  quizzes_none: QuizWhereInput
  stripe: StripeCustomerWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Waiver {
  party: [String!]
  otherParty: Json!
  agree: Boolean!
  firstName: String!
  lastName: String!
  date: String!
}

"""
A connection to a list of items.
"""
type WaiverConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [WaiverEdge]!
  aggregate: AggregateWaiver!
}

input WaiverCreateInput {
  otherParty: Json!
  agree: Boolean!
  firstName: String!
  lastName: String!
  date: String!
  party: WaiverCreatepartyInput
}

input WaiverCreateOneInput {
  create: WaiverCreateInput
}

input WaiverCreatepartyInput {
  set: [String!]
}

"""
An edge in a connection.
"""
type WaiverEdge {
  """
  The item at the end of the edge.
  """
  node: Waiver!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum WaiverOrderByInput {
  otherParty_ASC
  otherParty_DESC
  agree_ASC
  agree_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  date_ASC
  date_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WaiverPreviousValues {
  party: [String!]
  otherParty: Json!
  agree: Boolean!
  firstName: String!
  lastName: String!
  date: String!
}

type WaiverSubscriptionPayload {
  mutation: MutationType!
  node: Waiver
  updatedFields: [String!]
  previousValues: WaiverPreviousValues
}

input WaiverSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WaiverSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [WaiverSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WaiverWhereInput
}

input WaiverUpdateDataInput {
  otherParty: Json
  agree: Boolean
  firstName: String
  lastName: String
  date: String
  party: WaiverUpdatepartyInput
}

input WaiverUpdateInput {
  otherParty: Json
  agree: Boolean
  firstName: String
  lastName: String
  date: String
  party: WaiverUpdatepartyInput
}

input WaiverUpdateOneInput {
  create: WaiverCreateInput
  delete: Boolean
  update: WaiverUpdateDataInput
  upsert: WaiverUpsertNestedInput
}

input WaiverUpdatepartyInput {
  set: [String!]
}

input WaiverUpsertNestedInput {
  update: WaiverUpdateDataInput!
  create: WaiverCreateInput!
}

input WaiverWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WaiverWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [WaiverWhereInput!]
  agree: Boolean
  """
  All values that are not equal to given value.
  """
  agree_not: Boolean
  firstName: String
  """
  All values that are not equal to given value.
  """
  firstName_not: String
  """
  All values that are contained in given list.
  """
  firstName_in: [String!]
  """
  All values that are not contained in given list.
  """
  firstName_not_in: [String!]
  """
  All values less than the given value.
  """
  firstName_lt: String
  """
  All values less than or equal the given value.
  """
  firstName_lte: String
  """
  All values greater than the given value.
  """
  firstName_gt: String
  """
  All values greater than or equal the given value.
  """
  firstName_gte: String
  """
  All values containing the given string.
  """
  firstName_contains: String
  """
  All values not containing the given string.
  """
  firstName_not_contains: String
  """
  All values starting with the given string.
  """
  firstName_starts_with: String
  """
  All values not starting with the given string.
  """
  firstName_not_starts_with: String
  """
  All values ending with the given string.
  """
  firstName_ends_with: String
  """
  All values not ending with the given string.
  """
  firstName_not_ends_with: String
  lastName: String
  """
  All values that are not equal to given value.
  """
  lastName_not: String
  """
  All values that are contained in given list.
  """
  lastName_in: [String!]
  """
  All values that are not contained in given list.
  """
  lastName_not_in: [String!]
  """
  All values less than the given value.
  """
  lastName_lt: String
  """
  All values less than or equal the given value.
  """
  lastName_lte: String
  """
  All values greater than the given value.
  """
  lastName_gt: String
  """
  All values greater than or equal the given value.
  """
  lastName_gte: String
  """
  All values containing the given string.
  """
  lastName_contains: String
  """
  All values not containing the given string.
  """
  lastName_not_contains: String
  """
  All values starting with the given string.
  """
  lastName_starts_with: String
  """
  All values not starting with the given string.
  """
  lastName_not_starts_with: String
  """
  All values ending with the given string.
  """
  lastName_ends_with: String
  """
  All values not ending with the given string.
  """
  lastName_not_ends_with: String
  date: String
  """
  All values that are not equal to given value.
  """
  date_not: String
  """
  All values that are contained in given list.
  """
  date_in: [String!]
  """
  All values that are not contained in given list.
  """
  date_not_in: [String!]
  """
  All values less than the given value.
  """
  date_lt: String
  """
  All values less than or equal the given value.
  """
  date_lte: String
  """
  All values greater than the given value.
  """
  date_gt: String
  """
  All values greater than or equal the given value.
  """
  date_gte: String
  """
  All values containing the given string.
  """
  date_contains: String
  """
  All values not containing the given string.
  """
  date_not_contains: String
  """
  All values starting with the given string.
  """
  date_starts_with: String
  """
  All values not starting with the given string.
  """
  date_not_starts_with: String
  """
  All values ending with the given string.
  """
  date_ends_with: String
  """
  All values not ending with the given string.
  """
  date_not_ends_with: String
}
